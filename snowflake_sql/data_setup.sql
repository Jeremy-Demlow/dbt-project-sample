-- ====================================================================
-- SNOWFLAKE DATA SETUP
-- Run this AFTER role_setup.sql OR use dbt directly with seed files
-- ====================================================================
-- Prerequisites: role_setup.sql must be run first

USE ROLE DBT_ROLE;

-- Create database and schemas
DROP DATABASE IF EXISTS DBT_CORTEX_LLMS;

CREATE DATABASE IF NOT EXISTS DBT_CORTEX_LLMS;
CREATE SCHEMA IF NOT EXISTS DBT_CORTEX_LLMS.RAW;
CREATE SCHEMA IF NOT EXISTS DBT_CORTEX_LLMS.ANALYTICS;
CREATE SCHEMA IF NOT EXISTS DBT_CORTEX_LLMS.SEMANTIC_MODELS;

-- Grant comprehensive database and schema permissions to DBT_ROLE
GRANT ALL PRIVILEGES ON DATABASE DBT_CORTEX_LLMS TO ROLE DBT_ROLE;
GRANT ALL PRIVILEGES ON SCHEMA DBT_CORTEX_LLMS.RAW TO ROLE DBT_ROLE;
GRANT ALL PRIVILEGES ON SCHEMA DBT_CORTEX_LLMS.ANALYTICS TO ROLE DBT_ROLE;
GRANT ALL PRIVILEGES ON SCHEMA DBT_CORTEX_LLMS.SEMANTIC_MODELS TO ROLE DBT_ROLE;

-- Grant table-level permissions for future tables
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA DBT_CORTEX_LLMS.RAW TO ROLE DBT_ROLE;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA DBT_CORTEX_LLMS.ANALYTICS TO ROLE DBT_ROLE;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA DBT_CORTEX_LLMS.SEMANTIC_MODELS TO ROLE DBT_ROLE;

GRANT ALL PRIVILEGES ON FUTURE TABLES IN SCHEMA DBT_CORTEX_LLMS.RAW TO ROLE DBT_ROLE;
GRANT ALL PRIVILEGES ON FUTURE TABLES IN SCHEMA DBT_CORTEX_LLMS.ANALYTICS TO ROLE DBT_ROLE;
GRANT ALL PRIVILEGES ON FUTURE TABLES IN SCHEMA DBT_CORTEX_LLMS.SEMANTIC_MODELS TO ROLE DBT_ROLE;

-- Grant permissions for stages and file formats
GRANT ALL PRIVILEGES ON ALL STAGES IN SCHEMA DBT_CORTEX_LLMS.RAW TO ROLE DBT_ROLE;
GRANT ALL PRIVILEGES ON ALL FILE FORMATS IN SCHEMA DBT_CORTEX_LLMS.RAW TO ROLE DBT_ROLE;
GRANT ALL PRIVILEGES ON FUTURE STAGES IN SCHEMA DBT_CORTEX_LLMS.RAW TO ROLE DBT_ROLE;
GRANT ALL PRIVILEGES ON FUTURE FILE FORMATS IN SCHEMA DBT_CORTEX_LLMS.RAW TO ROLE DBT_ROLE;

--This SQL Script mimics the dbt project for loading and modelling the data in Snowflake
-- Set the role for this session
USE DATABASE DBT_CORTEX_LLMS;

-- ðŸ“„ File Format Setup - Making JSON feel at home
CREATE OR REPLACE FILE FORMAT RAW.JSON_FORMAT
    TYPE = 'JSON'
    STRIP_OUTER_ARRAY = TRUE
    COMPRESSION = 'AUTO';

CREATE OR REPLACE STAGE RAW.RAW_DATA_STAGE;

-- Upload customer interactions
PUT file://data/samples/1000_Customers/customer_interactions.json @RAW.RAW_DATA_STAGE;

-- Upload product reviews
PUT file://data/samples/1000_Customers/product_reviews.json @RAW.RAW_DATA_STAGE;

-- Upload support tickets
PUT file://data/samples/1000_Customers/support_tickets.json @RAW.RAW_DATA_STAGE;

-- Upload customers
PUT file://data/samples/1000_Customers/customers.json @RAW.RAW_DATA_STAGE;

-- ðŸŽ¯ Raw Data Tables - The foundation of our data castle
CREATE OR REPLACE TRANSIENT TABLE RAW.CUSTOMER_INTERACTIONS (data VARIANT);
CREATE OR REPLACE TRANSIENT TABLE RAW.PRODUCT_REVIEWS (data VARIANT);
CREATE OR REPLACE TRANSIENT TABLE RAW.SUPPORT_TICKETS (data VARIANT);
CREATE OR REPLACE TRANSIENT TABLE RAW.CUSTOMERS (data VARIANT);

-- ðŸ“¥ Data Loading - Let's fill these tables with good vibes
COPY INTO RAW.CUSTOMER_INTERACTIONS
FROM @RAW.RAW_DATA_STAGE/customer_interactions.json
FILE_FORMAT = RAW.JSON_FORMAT
ON_ERROR = 'CONTINUE';

COPY INTO RAW.PRODUCT_REVIEWS
FROM @RAW.RAW_DATA_STAGE/product_reviews.json
FILE_FORMAT = RAW.JSON_FORMAT
ON_ERROR = 'CONTINUE';

COPY INTO RAW.SUPPORT_TICKETS
FROM @RAW.RAW_DATA_STAGE/support_tickets.json
FILE_FORMAT = RAW.JSON_FORMAT
ON_ERROR = 'CONTINUE';

COPY INTO RAW.CUSTOMERS
FROM @RAW.RAW_DATA_STAGE/customers.json
FILE_FORMAT = RAW.JSON_FORMAT
ON_ERROR = 'CONTINUE';

-- ====================================================================
-- VERIFICATION
-- ====================================================================
SELECT 'Raw data setup complete! You can now run dbt or continue with analytics setup.' AS status;

-- Check data counts
SELECT 'CUSTOMER_INTERACTIONS' AS table_name, COUNT(*) AS row_count FROM RAW.CUSTOMER_INTERACTIONS
UNION ALL
SELECT 'PRODUCT_REVIEWS', COUNT(*) FROM RAW.PRODUCT_REVIEWS
UNION ALL  
SELECT 'SUPPORT_TICKETS', COUNT(*) FROM RAW.SUPPORT_TICKETS
UNION ALL
SELECT 'CUSTOMERS', COUNT(*) FROM RAW.CUSTOMERS;

-- ðŸŽ¯ Final Setup - Almost there!
CREATE OR REPLACE STAGE SEMANTIC_MODELS.CUSTOMER_INSIGHTS; 